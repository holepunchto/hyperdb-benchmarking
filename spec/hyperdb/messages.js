// This file is autogenerated by the hyperschema compiler
// Schema Version: 1
/* eslint-disable camelcase */
/* eslint-disable quotes */

const { c } = require('hyperschema/runtime')

const VERSION = 1

// eslint-disable-next-line no-unused-vars
let version = VERSION

// @x/a
const encoding0 = {
  preencode (state, m) {
    c.string.preencode(state, m.a)
    c.uint.preencode(state, m.b)
    c.string.preencode(state, m.c)
    c.uint.preencode(state, m.d)
    c.string.preencode(state, m.e)
    c.string.preencode(state, m.f)
    c.uint.preencode(state, m.g)
    state.end++ // max flag is 8 so always one byte

    if (m.h) c.uint.preencode(state, m.h)
    if (m.i) c.uint.preencode(state, m.i)
    if (m.j) c.string.preencode(state, m.j)
    if (m.k) c.string.preencode(state, m.k)
  },
  encode (state, m) {
    const flags =
      (m.h ? 1 : 0) |
      (m.i ? 2 : 0) |
      (m.j ? 4 : 0) |
      (m.k ? 8 : 0)

    c.string.encode(state, m.a)
    c.uint.encode(state, m.b)
    c.string.encode(state, m.c)
    c.uint.encode(state, m.d)
    c.string.encode(state, m.e)
    c.string.encode(state, m.f)
    c.uint.encode(state, m.g)
    c.uint.encode(state, flags)

    if (m.h) c.uint.encode(state, m.h)
    if (m.i) c.uint.encode(state, m.i)
    if (m.j) c.string.encode(state, m.j)
    if (m.k) c.string.encode(state, m.k)
  },
  decode (state) {
    const r0 = c.string.decode(state)
    const r1 = c.uint.decode(state)
    const r2 = c.string.decode(state)
    const r3 = c.uint.decode(state)
    const r4 = c.string.decode(state)
    const r5 = c.string.decode(state)
    const r6 = c.uint.decode(state)
    const flags = c.uint.decode(state)

    return {
      a: r0,
      b: r1,
      c: r2,
      d: r3,
      e: r4,
      f: r5,
      g: r6,
      h: (flags & 1) !== 0 ? c.uint.decode(state) : 0,
      i: (flags & 2) !== 0 ? c.uint.decode(state) : 0,
      j: (flags & 4) !== 0 ? c.string.decode(state) : null,
      k: (flags & 8) !== 0 ? c.string.decode(state) : null
    }
  }
}

// @x/b
const encoding1 = {
  preencode (state, m) {
    c.string.preencode(state, m.a)
    c.uint.preencode(state, m.b)
    c.string.preencode(state, m.c)
    c.uint.preencode(state, m.d)
  },
  encode (state, m) {
    c.string.encode(state, m.a)
    c.uint.encode(state, m.b)
    c.string.encode(state, m.c)
    c.uint.encode(state, m.d)
  },
  decode (state) {
    const r0 = c.string.decode(state)
    const r1 = c.uint.decode(state)
    const r2 = c.string.decode(state)
    const r3 = c.uint.decode(state)

    return {
      a: r0,
      b: r1,
      c: r2,
      d: r3
    }
  }
}

// @x/a/hyperdb#0
const encoding2 = {
  preencode (state, m) {
    c.string.preencode(state, m.a)
    c.uint.preencode(state, m.b)
    c.string.preencode(state, m.e)
    c.string.preencode(state, m.f)
    c.uint.preencode(state, m.g)
    state.end++ // max flag is 8 so always one byte

    if (m.h) c.uint.preencode(state, m.h)
    if (m.i) c.uint.preencode(state, m.i)
    if (m.j) c.string.preencode(state, m.j)
    if (m.k) c.string.preencode(state, m.k)
  },
  encode (state, m) {
    const flags =
      (m.h ? 1 : 0) |
      (m.i ? 2 : 0) |
      (m.j ? 4 : 0) |
      (m.k ? 8 : 0)

    c.string.encode(state, m.a)
    c.uint.encode(state, m.b)
    c.string.encode(state, m.e)
    c.string.encode(state, m.f)
    c.uint.encode(state, m.g)
    c.uint.encode(state, flags)

    if (m.h) c.uint.encode(state, m.h)
    if (m.i) c.uint.encode(state, m.i)
    if (m.j) c.string.encode(state, m.j)
    if (m.k) c.string.encode(state, m.k)
  },
  decode (state) {
    const r0 = c.string.decode(state)
    const r1 = c.uint.decode(state)
    const r4 = c.string.decode(state)
    const r5 = c.string.decode(state)
    const r6 = c.uint.decode(state)
    const flags = c.uint.decode(state)

    return {
      a: r0,
      b: r1,
      c: null,
      d: 0,
      e: r4,
      f: r5,
      g: r6,
      h: (flags & 1) !== 0 ? c.uint.decode(state) : 0,
      i: (flags & 2) !== 0 ? c.uint.decode(state) : 0,
      j: (flags & 4) !== 0 ? c.string.decode(state) : null,
      k: (flags & 8) !== 0 ? c.string.decode(state) : null
    }
  }
}

// @x/b/hyperdb#1
const encoding3 = {
  preencode (state, m) {
    c.string.preencode(state, m.a)
    c.string.preencode(state, m.c)
    c.uint.preencode(state, m.d)
  },
  encode (state, m) {
    c.string.encode(state, m.a)
    c.string.encode(state, m.c)
    c.uint.encode(state, m.d)
  },
  decode (state) {
    const r0 = c.string.decode(state)
    const r2 = c.string.decode(state)
    const r3 = c.uint.decode(state)

    return {
      a: r0,
      b: 0,
      c: r2,
      d: r3
    }
  }
}

function setVersion (v) {
  version = v
}

function encode (name, value, v = VERSION) {
  version = v
  return c.encode(getEncoding(name), value)
}

function decode (name, buffer, v = VERSION) {
  version = v
  return c.decode(getEncoding(name), buffer)
}

function getEnum (name) {
  switch (name) {
    default: throw new Error('Enum not found ' + name)
  }
}

function getEncoding (name) {
  switch (name) {
    case '@x/a': return encoding0
    case '@x/b': return encoding1
    case '@x/a/hyperdb#0': return encoding2
    case '@x/b/hyperdb#1': return encoding3
    default: throw new Error('Encoder not found ' + name)
  }
}

function getStruct (name, v = VERSION) {
  const enc = getEncoding(name)
  return {
    preencode (state, m) {
      version = v
      enc.preencode(state, m)
    },
    encode (state, m) {
      version = v
      enc.encode(state, m)
    },
    decode (state) {
      version = v
      return enc.decode(state)
    }
  }
}

const resolveStruct = getStruct // compat

module.exports = { resolveStruct, getStruct, getEnum, getEncoding, encode, decode, setVersion, version }
